generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(cuid())
  email      String   @unique
  name       String
  provider   String   // 'google', 'facebook', 'apple'
  providerId String
  role       String   // 'parent', 'teacher', 'admin'
  schoolId   String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  school    School?     @relation(fields: [schoolId], references: [id])
  students  Student[]
  vehicles  Vehicle[]
  queueEntries QueueEntry[]
  teacherActions QueueEntry[] @relation("TeacherActions")

  @@map("users")
}

model School {
  id          String   @id @default(cuid())
  name        String
  address     String
  phoneNumber String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  users     User[]
  students  Student[]
  queueEntries QueueEntry[]

  @@map("schools")
}

model Student {
  id       String   @id @default(cuid())
  name     String
  grade    String
  parentId String
  schoolId String
  qrCode   String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  parent   User     @relation(fields: [parentId], references: [id])
  school   School   @relation(fields: [schoolId], references: [id])
  queueEntries QueueEntry[]

  @@map("students")
}

model Vehicle {
  id           String   @id @default(cuid())
  parentId     String
  licensePlate String
  make         String?
  model        String?
  color        String?
  qrCode       String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  parent   User     @relation(fields: [parentId], references: [id])
  queueEntries QueueEntry[]

  @@map("vehicles")
}

model QueueEntry {
  id            String    @id @default(cuid())
  studentId     String
  parentId      String
  schoolId      String
  vehicleId     String?
  status        String    // 'waiting', 'called', 'picked_up'
  queuePosition Int
  enteredAt     DateTime  @default(now())
  calledAt      DateTime?
  pickedUpAt    DateTime?
  teacherId     String?

  student  Student  @relation(fields: [studentId], references: [id])
  parent   User     @relation(fields: [parentId], references: [id])
  school   School   @relation(fields: [schoolId], references: [id])
  vehicle  Vehicle? @relation(fields: [vehicleId], references: [id])
  teacher  User?    @relation("TeacherActions", fields: [teacherId], references: [id])

  @@map("queue_entries")
}